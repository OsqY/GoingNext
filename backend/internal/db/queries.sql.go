// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    name,
    description,
    created_by
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateRoleParams struct {
	Name        string
	Description pgtype.Text
	CreatedBy   pgtype.Int4
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description, arg.CreatedBy)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    username,
    password,
    role_id,
    created_by
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, email, username, password, role_id, is_active, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateUserParams struct {
	Email     string
	Username  string
	Password  string
	RoleID    int32
	CreatedBy pgtype.Int4
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.RoleID,
		arg.CreatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.RoleID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT id, name, description, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM roles
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id, u.email, u.username, u.password, u.role_id, u.is_active, u.created_at, u.updated_at, u.deleted_at, u.created_by, u.updated_by, u.deleted_by, r.name as role_name 
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE u.email = $1 AND u.deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID        int32
	Email     string
	Username  string
	Password  string
	RoleID    int32
	IsActive  pgtype.Bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	CreatedBy pgtype.Int4
	UpdatedBy pgtype.Int4
	DeletedBy pgtype.Int4
	RoleName  string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.RoleID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.RoleName,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT u.id, u.email, u.username, u.password, u.role_id, u.is_active, u.created_at, u.updated_at, u.deleted_at, u.created_by, u.updated_by, u.deleted_by, r.name as role_name 
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE u.id = $1 AND u.deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID        int32
	Email     string
	Username  string
	Password  string
	RoleID    int32
	IsActive  pgtype.Bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	CreatedBy pgtype.Int4
	UpdatedBy pgtype.Int4
	DeletedBy pgtype.Int4
	RoleName  string
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.RoleID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.RoleName,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, description, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM roles
WHERE deleted_at IS NULL
ORDER BY name
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT u.id, u.email, u.username, u.password, u.role_id, u.is_active, u.created_at, u.updated_at, u.deleted_at, u.created_by, u.updated_by, u.deleted_by, r.name as role_name 
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE u.deleted_at IS NULL
ORDER BY u.created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

type ListUsersRow struct {
	ID        int32
	Email     string
	Username  string
	Password  string
	RoleID    int32
	IsActive  pgtype.Bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	DeletedAt pgtype.Timestamptz
	CreatedBy pgtype.Int4
	UpdatedBy pgtype.Int4
	DeletedBy pgtype.Int4
	RoleName  string
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.RoleID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET 
    deleted_at = CURRENT_TIMESTAMP,
    deleted_by = $2
WHERE id = $1 AND deleted_at IS NULL
`

type SoftDeleteUserParams struct {
	ID        int32
	DeletedBy pgtype.Int4
}

func (q *Queries) SoftDeleteUser(ctx context.Context, arg SoftDeleteUserParams) error {
	_, err := q.db.Exec(ctx, softDeleteUser, arg.ID, arg.DeletedBy)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = COALESCE($3, email),
    username = COALESCE($4, username),
    role_id = COALESCE($5, role_id),
    updated_at = CURRENT_TIMESTAMP,
    updated_by = $2
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, email, username, password, role_id, is_active, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateUserParams struct {
	ID        int32
	UpdatedBy pgtype.Int4
	Email     pgtype.Text
	Username  pgtype.Text
	RoleID    pgtype.Int4
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.UpdatedBy,
		arg.Email,
		arg.Username,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.RoleID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}
